// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Warehouse {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  locations   Location[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("warehouse")
}

model Location {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  warehouseId Int
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  inventory   Inventory[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("location")
}

model Item {
  id          Int       @id @default(autoincrement())
  imei        String    @unique
  name        String
  sku         String    @db.VarChar(15)
  description String?
  status      String    @default("active")
  inventory   Inventory[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("item")
}

model Inventory {
  id         Int      @id @default(autoincrement())
  itemId     Int
  locationId Int
  quantity   Int      @default(1)
  status     String   @default("in_stock")
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("inventory")
}

model DeviceTest {
  id          Int      @id @default(autoincrement())
  imei        String
  testType    String
  testResult  String
  testDate    DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("device_test")
}

model ImeiSkuInfo {
  id          Int      @id @default(autoincrement())
  imei        String   @unique
  sku         String
  brand       String?
  model       String?
  storage     String?
  color       String?
  carrier     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("imei_sku_info")
}

model ImeiInspectData {
  id              Int      @id @default(autoincrement())
  imei            String   @unique
  batteryHealth   String?
  screenCondition String?
  bodyCondition   String?
  workingStatus   String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("imei_inspect_data")
}

model ImeiUnits {
  id        Int      @id @default(autoincrement())
  imei      String   @unique
  unitName  String?
  unitType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("imei_units")
}

// Queue System Models
model ImeiDataQueue {
  id            Int       @id @default(autoincrement())
  rawData       Json      // JSONB in database
  status        String    @default("pending") // pending, processing, completed, failed
  priority      Int       @default(5) // 1=high, 5=normal, 10=low
  retryCount    Int       @default(0) @map("retry_count")
  maxRetries    Int       @default(3) @map("max_retries")
  source        String?   // 'bulk-add', 'single-add', 'api', etc.
  batchId       String?   @map("batch_id") // Group related items together
  errorMessage  String?   @map("error_message")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  processedAt   DateTime? @map("processed_at")

  @@map("imei_data_queue")
  @@index([status, priority])
  @@index([batchId])
  @@index([source])
  @@index([createdAt])
}

// Queue Processing Logs
model QueueProcessingLog {
  id          Int      @id @default(autoincrement())
  queueItemId Int      @map("queue_item_id")
  action      String   // 'processing', 'completed', 'failed', 'retry'
  message     String?
  error       String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("queue_processing_log")
  @@index([queueItemId])
  @@index([createdAt])
}

// Queue Batch Tracking
model QueueBatch {
  id              Int       @id @default(autoincrement())
  batchId         String    @unique @map("batch_id")
  source          String
  totalItems      Int       @default(0) @map("total_items")
  processedItems  Int       @default(0) @map("processed_items")
  failedItems     Int       @default(0) @map("failed_items")
  status          String    @default("active") // active, completed, failed
  startedAt       DateTime  @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("queue_batch")
  @@index([batchId])
  @@index([status])
  @@index([startedAt])
}


