generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  id              Int               @id @default(autoincrement())
  sku             String?
  name            String
  description     String?
  upc             String?           @unique
  brand           String?
  model           String?
  grade           String            @default("used")
  working         String            @default("PENDING") // YES, NO, PENDING
  cost            Decimal?          @db.Decimal(10, 2)
  price           Decimal?          @db.Decimal(10, 2)
  weightOz        Int?
  dimensions      String?
  imageUrl        String?
  type            String
  imei            String?           @unique
  serialNumber    String?           @unique
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  carrier         String?
  color           String?
  modelNumber     String?
  storage         String?
  carrierId       String?
  skuGeneratedAt  DateTime?
  condition       String?           @default("UNKNOWN") // NEW, USED, DAMAGED, REFURBISHED
  batteryHealth   Int?              // 0-100 percentage
  screenCondition String?           // EXCELLENT, GOOD, FAIR, POOR
  bodyCondition   String?           // EXCELLENT, GOOD, FAIR, POOR
  testResults     Json?             // Store detailed test results
  inboundLogs     InboundLog[]      @relation("ItemInboundLogs")
  inventory       Inventory[]       @relation("ItemInventory")
  outboundLogs    OutboundLog[]     @relation("ItemOutboundLogs")
  outboundQueue   OutboundQueue[]   @relation("ItemOutboundQueue")
  processingQueue ProcessingQueue[] @relation("ItemProcessingQueue")
  qcApprovals     QCApproval[]      @relation("ItemQCApproval")
  deviceTests     DeviceTest[]      @relation("ItemDeviceTests")

  @@index([sku])
  @@index([imei])
  @@index([serialNumber])
  @@index([type])
  @@index([grade])
  @@index([working])
  @@index([isActive])
}

model Warehouse {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  address     String?
  contactInfo Json?
  locations   Location[]

  @@index([isActive])
}

model Location {
  id          Int        @id @default(autoincrement())
  name        String
  warehouseId Int
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  capacity    Int?       // Maximum capacity
  currentOccupancy Int?  // Current items in location
  locationType String?   // SHELF, BIN, PALLET, etc.
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  inventory   Inventory[]

  @@unique([warehouseId, name])
  @@index([isActive])
  @@index([locationType])
}

model Inventory {
  id         Int      @id @default(autoincrement())
  itemId     Int
  locationId Int
  sku        String
  quantity   Int      @default(1)
  reserved   Int      @default(0) // Reserved for outbound orders
  available  Int      @default(1) // Available for sale
  updatedAt  DateTime @updatedAt
  item       Item     @relation("ItemInventory", fields: [itemId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([itemId, locationId])
  @@index([sku])
  @@index([quantity])
  @@index([available])
}

model InboundLog {
  id              Int               @id @default(autoincrement())
  itemId          Int
  quantity        Int
  location        String
  receivedBy      String
  receivedAt      DateTime          @default(now())
  notes           String?
  status          String            @default("RECEIVED")
  source          String?           // SUPPLIER, TRANSFER, RETURN
  trackingNumber  String?
  item            Item              @relation("ItemInboundLogs", fields: [itemId], references: [id], onDelete: Cascade)
  processingQueue ProcessingQueue[] @relation("InboundLogProcessingQueue")

  @@index([status])
  @@index([receivedAt])
  @@index([source])
}

model OutboundLog {
  id            Int      @id @default(autoincrement())
  itemId        Int
  quantity      Int
  location      String
  shippedBy     String
  shippedAt     DateTime @default(now())
  notes         String?
  status        String   @default("SHIPPED")
  destination   String?
  trackingNumber String?
  orderNumber   String?
  item          Item     @relation("ItemOutboundLogs", fields: [itemId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([shippedAt])
  @@index([orderNumber])
}

model ProcessingQueue {
  id           Int              @id @default(autoincrement())
  itemId       Int
  inboundLogId Int
  status       String           @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED
  assignedTo   String?
  startedAt    DateTime?
  completedAt  DateTime?
  notes        String?
  priority     Int              @default(1) // 1-5, 5 being highest
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  inboundLog   InboundLog       @relation("InboundLogProcessingQueue", fields: [inboundLogId], references: [id], onDelete: Cascade)
  item         Item             @relation("ItemProcessingQueue", fields: [itemId], references: [id], onDelete: Cascade)
  qcApprovals  QCApproval[]     @relation("ProcessingQueueQCApproval")

  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@index([createdAt])
}

model QCApproval {
  id                Int             @id @default(autoincrement())
  itemId            Int
  processingQueueId Int
  status            String          @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedBy        String?
  approvedAt        DateTime?
  rejectionReason   String?
  notes             String?
  qcScore           Int?            // 0-100 quality score
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  item              Item            @relation("ItemQCApproval", fields: [itemId], references: [id], onDelete: Cascade)
  processingQueue   ProcessingQueue @relation("ProcessingQueueQCApproval", fields: [processingQueueId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([qcScore])
  @@index([approvedBy])
}

model OutboundQueue {
  id          Int            @id @default(autoincrement())
  itemId      Int
  quantity    Int
  location    String
  requestedBy String
  status      String         @default("QUEUED") // QUEUED, PROCESSING, SHIPPED, CANCELLED
  priority    Int            @default(1)
  scheduledAt DateTime?
  shippedAt   DateTime?
  canceledAt  DateTime?
  canceledBy  String?
  notes       String?
  orderNumber String?
  customerInfo Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  item        Item           @relation("ItemOutboundQueue", fields: [itemId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([priority])
  @@index([orderNumber])
  @@index([scheduledAt])
}

// New model for tracking device testing results
model DeviceTest {
  id          Int      @id @default(autoincrement())
  itemId      Int
  testType    String   // PHONECHECK, MANUAL, AUTOMATED
  testDate    DateTime @default(now())
  testResults Json     // Detailed test results
  passed      Boolean
  notes       String?
  testedBy    String?
  item        Item     @relation("ItemDeviceTests", fields: [itemId], references: [id], onDelete: Cascade)

  @@index([testType])
  @@index([testDate])
  @@index([passed])
  @@index([testedBy])
}


